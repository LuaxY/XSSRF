<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;

use App\Exploit;
use App\Faker;

use Validator;

class ExploitController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $exploits = Exploit::all();

        return view('exploits.index', ['exploits' => $exploits]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $fakers = Faker::all();
        $fakersList = [];

        foreach ($fakers as $faker)
        {
            $fakersList[$faker->id] = $faker->name;
        }

        return view('exploits.create', ['fakers' => $fakersList]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), Exploit::$rules);

        if ($validator->fails())
        {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        $exploit = new Exploit;
        $exploit->name        = $request->input('name');
        $exploit->description = $request->input('description');
        $exploit->code        = $request->input('code');
        $exploit->faker_id    = $request->input('faker_id');
        $exploit->save();

        session()->flash('message', 'Successfully created exploit!');

        return redirect('admin/exploits');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $exploit = Exploit::findOrFail($id);

        return view('exploits.show', ['exploit' => $exploit]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $exploit = Exploit::findOrFail($id);
        $fakers = Faker::all();
        $fakersList = [];

        foreach ($fakers as $faker)
        {
            $fakersList[$faker->id] = $faker->name;
        }

        return view('exploits.edit', ['exploit' => $exploit, 'fakers' => $fakersList]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $validator = Validator::make($request->all(), Exploit::$rules);

        if ($validator->fails())
        {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        $exploit = Exploit::findOrFail($id);
        $exploit->name        = $request->input('name');
        $exploit->description = $request->input('description');
        $exploit->code        = $request->input('code');
        $exploit->faker_id    = $request->input('faker_id');
        $exploit->save();

        session()->flash('message', 'Successfully updated exploit!');

        return redirect('admin/exploits');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $exploit = Exploit::findOrFail($id);
        $exploit->delete();

        session()->flash('message', 'Successfully deleted exploit!');

        return redirect('admin/exploits');
    }
}
